using System.Reflection;
using adventofcode2024.Utilities;

namespace adventofcode2024.Solutions
{
    internal class Dec11PuzzlerSolver : IPuzzleSolver
    {
        public string SolvePartOne(bool test)
        {
            return Solve(test, isPartTwo: false);
        }

        public string SolvePartTwo(bool test)
        {
            return Solve(test, isPartTwo: true);
        }

        private static string Solve(bool test, bool isPartTwo)
        {
            string line = PuzzleReader.GetPuzzleInput(11, test).First();

            var stones = line.Split(' ').Select(x => Int64.Parse(x)).ToList();

            // Will store the number of stones generated by a stone with label k
            // after v blinks.
            var memoized = new Dictionary<(long, int), long>();

            long numStones = 0;
            int numBlinks = isPartTwo ? 75 : 25;
            foreach (var stone in stones)
            {
                numStones += NumStones(stone, numBlinks, memoized);
            }

            return numStones.ToString();
        }

        private static long NumStones(long label, int numBlinks, Dictionary<(long, int), long> memoized)
        {
            if (numBlinks == 0)
            {
                return 1;
            }

            if (memoized.ContainsKey((label, numBlinks)))
            {
                return memoized[(label, numBlinks)];
            }

            long numStones = 0;
            if (label == 0)
            {
                numStones = NumStones(1, numBlinks - 1, memoized);
            }
            else
            {
                string stoneLabel = label.ToString();
                if (stoneLabel.Length % 2 == 0)
                {
                    long left = Int64.Parse(stoneLabel.Substring(0, stoneLabel.Length / 2));
                    long right = Int64.Parse(stoneLabel.Substring(stoneLabel.Length / 2));

                    numStones =  NumStones(left, numBlinks - 1, memoized) + NumStones(right, numBlinks - 1, memoized);
                }
                else
                {
                    numStones = NumStones(label * 2024, numBlinks - 1, memoized);
                }
            }

            memoized[(label, numBlinks)] = numStones;
            return numStones;
        }
    }
}
